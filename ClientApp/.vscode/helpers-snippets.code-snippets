{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // HOOKS
  "useTranslationHook": {
    "prefix": "utr",
    "body": ["const { t } = useTranslation$1()"],
    "description": "useTranslation"
  },
  "useDispatchHook": {
    "prefix": "udi",
    "body": ["const dispatch = useAppDispatch$1()"],
    "description": "useDispatch"
  },
  "useSelectorHook": {
    "prefix": "use",
    "body": ["const {$3} = useSelector$1($2)"],
    "description": "useSelector"
  },
  "useStateHook": {
    "prefix": "ust",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = ${3:React.}useState($2)"
    ],
    "description": "useState"
  },
  "useHistoryHook": {
    "prefix": "uhi",
    "body": ["const ${2:history} = useHistory$1()"],
    "description": "useHistory"
  },
  "useRouteMatchHook": {
    "prefix": "uro",
    "body": ["const match = useRouteMatch$1()"],
    "description": "useRouteMatch"
  },
  "useSpinnerHook": {
    "prefix": "usp",
    "body": ["const showSpinner = useSpinner(spinners$1.$2})"],
    "description": "useSpinner"
  },
  "useEffectHook": {
    "prefix": "uef",
    "body": ["React.useEffect(() => {", "  $1", "}, [$2])"],
    "description": "useEffect"
  },
  "useCallbackHook": {
    "prefix": "uca",
    "body": ["React.useCallback(() => {", "  $2", "}, [$1])"],
    "description": "useCallback"
  },
  "useRefHook": {
    "prefix": "ure",
    "body": ["const $1Ref = React.useRef(${2:null})"],
    "description": "useRef"
  },
  "useSnakcbarHook": {
    "prefix": "usn",
    "body": ["const {enqueueSnackbar} = useSnackbar${1}()"],
    "description": "useSnakcbar"
  },
  "usePopupHook": {
    "prefix": "upo",
    "body": ["const {setPopup,showPopup} = usePopup${1}()"],
    "description": "usePopup"
  },

  // FUNCS
  "Styled components fat arrow func": {
    "prefix": "scf",
    "body": ["${_ => _.$1};"]
  },
  "Translations": {
    "prefix": "tt",
    "body": ["t(Translations$1.$2)"]
  },

  //IMPORTS
  "Styled components": {
    "prefix": "isc",
    "body": ["import styled from 'styled-components'"]
  }
}
